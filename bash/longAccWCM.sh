
# Этот итт шаблон замучен под обработку старых (более 3-4 месяцев) логов WCM. 
# Актуально, естественно, только для аккаунтов с этим самым подключенным долгосрочным хранением.
# В долгосроке все, как в обычных - в архиве за сутки хранятся отдельно архивы про импы, ивенты и конверсии. 
# Внутри каждого еще матрешки, под обработку в результате нужно все поэтапно разархивировать, дабы получить в конце концов csv-файлы, с которыми уже можно работать.

# Долгосрочные логи хранятся на proclog1 в каталоге /var/logs-storage/wcm/

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Шаблон под impression



#!/bin/bash

# Три строки ниже - вводные из задачи
ACCOUNT=1488
# Обе даты включаются в выгрузку
dt1=2018-02-20
dtEnd=2018-07-13

#-------------------------------------------------------

dtEnd=$(date +%Y-%m-%d -d "$dtEnd + 1 day")
dt2=$(date +%Y-%m-%d -d "$dt1 + 1 day")
dtBuff=$(( ( $(date +%s -d "$dtEnd") - $(date +%s -d "$dt1") )/86400 ))

for i in $(seq 1 $dtBuff); do

    dtLog=$(date +%Y%m%d -d "$dt1")

    unzip "/var/logs-storage/wcm/$ACCOUNT/$dt1*.zip" -d ./
    rm -rf *clickevent.zip
    rm -rf *conversion.zip

    unzip datamining_"$ACCOUNT"_"$dtLog"*_impressionvisibility.zip -d ./
    rm datamining_"$ACCOUNT"_"$dtLog"_impressionvisibility.zip

    unzip "*.zip" -d ./
    rm *.zip

# Ниже - обычный конвейер из cat + awk, уже знакомый Вам по обычным выгрузкам.
# В нем C-подобно пишутся условия отбора значений, подробнее - в мануале по awk. 
# Номера столбцов не закреплены строго и могут изменяться, для уточнения конкретных значений воспользуйтесь командой head

    cat *.csv | awk 'BEGIN{FS=",";OFS=";"}{if ($9 == 22) print $1}' >> 1030221.22.imp.csv
    rm datamining*.csv

    dt1=$(date +%Y-%m-%d -d "$dt1 + 1 day")
    dt2=$(date +%Y-%m-%d -d "$dt2 + 1 day")

done

for f in *.csv; do
    sort -u "$f" -o "$f"
done

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



# Шаблон под event (click, progress, mute и т.д.)



#!/bin/bash

# Три строки ниже - вводные из задачи
ACCOUNT=1488
# Обе даты включаются в выгрузку
dt1=2018-02-20
dtEnd=2018-07-13

#-------------------------------------------------------

dtEnd=$(date +%Y-%m-%d -d "$dtEnd + 1 day")
dt2=$(date +%Y-%m-%d -d "$dt1 + 1 day")
dtBuff=$(( ( $(date +%s -d "$dtEnd") - $(date +%s -d "$dt1") )/86400 ))

for i in $(seq 1 $dtBuff); do

    dtLog=$(date +%Y%m%d -d "$dt1")
    
    unzip "/var/logs-storage/wcm/$ACCOUNT/$dt1*.zip" -d ./
    rm -rf *impressionvisibility.zip
    rm -rf *conversion.zip
    
    unzip datamining_"$ACCOUNT"_"$dtLog"*_clickevent.zip -d ./
    rm datamining_"$ACCOUNT"_"$dtLog"_clickevent.zip
    
    unzip "*.zip" -d ./
    rm *.zip

# Ниже - обычный конвейер из cat + awk, уже знакомый Вам по обычным выгрузкам.
# В нем C-подобно пишутся условия отбора значений, подробнее - в мануале по awk.
# Номера столбцов не закреплены строго и могут изменяться, для уточнения конкретных значений воспользуйтесь командой head

    cat *.csv | awk 'BEGIN{FS=",";OFS=";"}{if ( ($9 == 21) && (($17 == "click") || ($18 == "click")) ) print $1}' >> 1030221.21.cl.csv 
    rm datamining*.csv

    dt1=$(date +%Y-%m-%d -d "$dt1 + 1 day")
    dt2=$(date +%Y-%m-%d -d "$dt2 + 1 day")

done

for f in *.csv; do
    sort -u "$f" -o "$f"
done

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



# Шаблон под conversion



#!/bin/bash

# Три строки ниже - вводные из задачи
ACCOUNT=1488
# Обе даты включаются в выгрузку
dt1=2018-02-20
dtEnd=2018-07-13

#-------------------------------------------------------

dtEnd=$(date +%Y-%m-%d -d "$dtEnd + 1 day")
dt2=$(date +%Y-%m-%d -d "$dt1 + 1 day")
dtBuff=$(( ( $(date +%s -d "$dtEnd") - $(date +%s -d "$dt1") )/86400 ))

for i in $(seq 1 $dtBuff); do

    dtLog=$(date +%Y%m%d -d "$dt1")

    unzip "/var/logs-storage/wcm/$ACCOUNT/$dt1*.zip" -d ./
    rm -rf *clickevent.zip
    rm -rf *impressionvisibility.zip

    unzip datamining_"$ACCOUNT"_"$dtLog"*_conversion.zip -d ./
    rm datamining_"$ACCOUNT"_"$dtLog"_conversion.zip

    unzip "*.zip" -d ./
    rm *.zip

# Ниже - обычный конвейер из cat + awk, уже знакомый Вам по обычным выгрузкам.
# В нем C-подобно пишутся условия отбора значений, подробнее - в мануале по awk.
# Номера столбцов не закреплены строго и могут изменяться, для уточнения конкретных значений воспользуйтесь командой head

    cat *.csv | awk 'BEGIN{FS=",";OFS=";"}{if ($19 == 37) print $1}' >> 1030221.37.conv.csv
    rm datamining*.csv

    dt1=$(date +%Y-%m-%d -d "$dt1 + 1 day")
    dt2=$(date +%Y-%m-%d -d "$dt2 + 1 day")

done

for f in *.csv; do
    sort -u "$f" -o "$f"
done

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



# Обычно результат требуется отправить в WAM, шаблоны ниже.


# Encrypted (22 символа)

cat "1030221.37.conv.csv" | go run ~/lps/core/cryptor.go -a encrypt > "1030221.37.conv.enc.csv" && rm "1030221.37.conv.csv"
cat "1030221.37.conv.enc.csv" | awk '{print $1 "|242039"}' > /home/wam/encrypted/1030221.37.conv.enc.csv

# Decrypted (14 символов)

cat "1030221.37.conv.csv" | awk '{print $1 "|242039"}' > /home/wam/notencrypted/1030221.37.conv.csv

