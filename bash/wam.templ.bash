


# Шаблон выгрузки логов из WAM

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Пишем шебанг

#!/bin/bash

# Здесь все вводные из задачи

## id аккаунта и сегментов

ACCOUNT=1488
SEG=(56179 56178 56175)

## id аккаунта WAM, в который нужно отправить куки (если задача состоит в отправке именно в WAM, в противном случае это избыточная переменная)

WAMACCOUNT=2323

## Даты начала и конца выгрузки включительно

dt1=2018-02-28
dtEnd=2018-07-13

## Если скрипт будет в дейли, нужно поставить динамические даты

dt1=$(date -d "2 days ago" '+%Y-%m-%d')
dtEnd=$(date -d "1 day ago" '+%Y-%m-%d')

#---------------------------------------------------------

dt2=$(date +%Y-%m-%d -d "$dt1 + 1 day")
dtEnd=$(date +%Y-%m-%d -d "$dtEnd + 1 day")
dtBuff=$(( ( $(date +%s -d "$dtEnd") - $(date +%s -d "$dt1") )/86400 ))

SOURCE_FOLDER="$(pwd)/source"
mkdir -m 777 -p "$SOURCE_FOLDER"

for i in $(seq 1 $dtBuff); do
	~/lps/core/log-loader.sh "$ACCOUNT" $dt1 $dt2 "$SOURCE_FOLDER" 1>&2

	for i in "${SEG[@]}"; do

# Ниже сама обработка логов, возможны два варианта

## 1. Нужны куки, чтобы куда-нибудь их передать - сразу вырезаем куки без прелюдий одним конвейером		

 		zcat source/*.zip | grep \"$i\" | cut -d '"' -f4 | sort -u >> "$i.csv"

## 2. Нужны json'ы и куки, чтобы обогатить/найти кого-нибудь и т.д.

 		zcat source/*.zip | grep \"$i\" >> "$i.json"
 		cut -d '"' -f4 "$i.json" | sort -u >> "$i.csv"

	done

	dt1=$(date +%Y-%m-%d -d "$dt1 + 1 day")
	dt2=$(date +%Y-%m-%d -d "$dt2 + 1 day")

	rm -rf  source/*.zip
done

rm -rf source

# Сортировка и уникализация

for f in *.csv; do
	sort -u "$f" -o "$f"
done


# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Как передавать 

## В WAM - внутри awk нужно написать id сегмента, в который нужно передать куки
## Имя конечного файла, размещаемого на FTP для французов, должно содержать в качестве префикса ID аккаунта, для загрузки в котороый предназначены куки

### Шифрованные куки (22 символа)

cat 1031488_1.enc.csv | awk '{print $1 "|291472"}' > /home/wam/encrypted/"$WAMACCOUNT"_1031488_1.csv

### Нешифрованные куки (12 символов)

cat 1031488_1.csv | awk '{print $1 "|291472"}' > /home/wam/notencrypted/"$WAMACCOUNT"_1031488_1.csv

### Если нужно зашифровать/расшифровать
### Также есть ключ -i - по столбцу, отсчет с 0

cat "1031488_1.csv" | go run ~/lps/core/cryptor.go -a encrypt > "1031488_1.enc.csv" && rm "1031488_1.csv" 

cat "1031488_1.enc.csv" | go run ~/lps/core/cryptor.go -a decrypt > "1031488_1.csv" && rm "1031488_1.enc.csv" 

## В myTarget 

### В myTarget есть нижний и верхний пороги по загрузке. Длина списка должна быть от 5 тысяч до 5 миллионов строк.
### При обработке малочисленных событий типо конверсий может понадобиться искусственное увеличение длины списка до минимальной.
### Для этого используется конкатенация со списком нешифрованных кук (их майтаргет определяет недействительными)

for f in *.csv; do
	sort -u "$f" /home/lmuratov/fake_cookies.csv -o "$f"
done

### Ключ -base: при первичной загрузке 0. Полученное значение подставляется вместо 0, чтобы догружать в тот же сегмент

### Ключи -name и -file - понятно по названию

export GOPATH=/home/proclog/go:/opt/proclog/lps/core/goLibs
~/lps/core/myTargetUploader/myTargetUploader -config ~/lps/core/config.json -token ~/lps/core/token -base 0 -name "[Libresse] Price_Promo_Jan-Mar18_Videoprogress100" -file 1030918.cl.enc.csv  

###  

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Чтобы сделать дейли:

# Добавить в начале скрипта, заменив task_number на номер задачи (+ буква, если такое уже есть):

mkdir task_number
cd task_number

# Добавить в конце, заменив task_number на номер задачи (+ буква, если такое уже есть):

cd ..
rm -rf task_number

# Записать задачу в crontab пользователя proclog

sudo -Hu proclog crontab -e

# Можно играть с датами - если поставить так, то скрипт в прямом смысле быдет работать со вчерашними логами.
# То есть, время запуска должно быть в периоде с 12 часов до 24 часов.

dt1=$(date -d "1 days ago" '+%Y-%m-%d')
dtEnd=$(date -d "0 day ago" '+%Y-%m-%d')

# При запуске скрипта с 0 до 12 часов, последние доступные логи - позавчерашние, и это стоит учесть.

dt1=$(date -d "2 days ago" '+%Y-%m-%d')
dtEnd=$(date -d "1 day ago" '+%Y-%m-%d')

# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Пример скрипта


#!/bin/bash

mkdir 1034337_lm
cd 1034337_lm

ACCOUNT='2337'
SEG=(193874 193875 193876 193870 193871 193872 193866 193867 193868)

WAMACCOUNT='4671'

dt1=$(date -d "2 days ago" '+%Y-%m-%d')
dtEnd=$(date -d "today" '+%Y-%m-%d')
# dt1=2018-05-08
# dtEnd=2018-04-26
dt2=$(date +%Y-%m-%d -d "$dt1 + 1 day")
dtBuff=$(( ( $(date +%s -d "$dtEnd") - $(date +%s -d "$dt1") )/86400 ))

SOURCE_FOLDER="$(pwd)/source"
mkdir -m 777 -p "$SOURCE_FOLDER"

for i in $(seq 1 $dtBuff); do
	~/lps/core/log-loader.sh "$ACCOUNT" $dt1 $dt2 "$SOURCE_FOLDER" 1>&2

	for i in "${SEG[@]}"; do
		zcat source/*.zip | grep \"$i\" | cut -d '"' -f4 | sort -u >> "$i.csv"
	done

	dt1=$(date +%Y-%m-%d -d "$dt1 + 1 day")
	dt2=$(date +%Y-%m-%d -d "$dt2 + 1 day")

	rm -rf  source/*.zip
done

rm -rf source

for f in *.csv; do
	sort -u "$f" -o "$f"
done

sort -u 193874.csv 193875.csv 193876.csv > 1034337_1.csv
sort -u 193870.csv 193871.csv 193872.csv > 1034337_2.csv
sort -u 193866.csv 193867.csv 193868.csv > 1034337_3.csv

cat 1034337_1.csv | awk '{print $1 "|236611"}' > /home/wam/encrypted/"$WAMACCOUNT"_1034337_1.csv 
cat 1034337_2.csv | awk '{print $1 "|236610"}' > /home/wam/encrypted/"$WAMACCOUNT"_1034337_2.csv 
cat 1034337_3.csv | awk '{print $1 "|236609"}' > /home/wam/encrypted/"$WAMACCOUNT"_1034337_3.csv 

for f in *.csv; do
	sort -u "$f" /home/lmuratov/fake_cookies.csv -o "$f"
done

export GOPATH=/home/proclog/go:/opt/proclog/lps/core/goLibs
~/lps/core/myTargetUploader/myTargetUploader -config ~/lps/core/config.json -token ~/lps/core/token -base 4144133 -name "Exposed_Technonikol_Native Roll" -file 1034337_1.csv 

cd ..
rm -rf 1034337_lm


# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

# Несколько святых заповедей

# Ответственность за работоспособность твоего скрипта лежит на тебе.
# Ответственность за ущерб, причиненный твои скриптом, лежит на тебе.
# Все действия должны быть осознанными.
# Проверь перед выполнением код и файлы.
# Проверь результат.
# Учти все возможные конфликты, коллизии, нагрузки.
